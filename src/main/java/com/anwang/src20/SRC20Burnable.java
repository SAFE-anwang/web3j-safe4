package com.anwang.src20;

import com.anwang.utils.ContractUtil;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.protocol.Web3j;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class SRC20Burnable {
    private final ContractUtil contractUtil;
    private final String bytecode = "0x6101606040523480156200001257600080fd5b50604051620023f1380380620023f18339810160408190526200003591620003f7565b8280604051806040016040528060018152602001603160f81b81525085856200006d620000676200017260201b60201c565b62000176565b60096200007b8382620004f8565b50600a6200008a8282620004f8565b505050620000a8600b83620001c660201b62000cfc1790919060201c565b61012052620000c581600c620001c6602090811b62000cfc17901c565b61014052815160208084019190912060e052815190820120610100524660a0526200015360e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000169338262000216565b50505062000640565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602083511015620001e657620001de83620002df565b905062000210565b82620001fd836200032260201b62000d2d1760201c565b906200020a9082620004f8565b5060ff90505b92915050565b6001600160a01b038216620002725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060086000828254620002869190620005c4565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080829050601f815111156200030d578260405163305a27a960e01b8152600401620002699190620005e6565b80516200031a826200061b565b179392505050565b90565b505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200035d57818101518382015260200162000343565b50506000910152565b600082601f8301126200037857600080fd5b81516001600160401b03808211156200039557620003956200032a565b604051601f8301601f19908116603f01168101908282118183101715620003c057620003c06200032a565b81604052838152866020858801011115620003da57600080fd5b620003ed84602083016020890162000340565b9695505050505050565b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b620004338783880162000366565b945060208601519150808211156200044a57600080fd5b50620004598682870162000366565b925050604084015190509250925092565b600181811c908216806200047f57607f821691505b602082108103620004a057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032557600081815260208120601f850160051c81016020861015620004cf5750805b601f850160051c820191505b81811015620004f057828155600101620004db565b505050505050565b81516001600160401b038111156200051457620005146200032a565b6200052c816200052584546200046a565b84620004a6565b602080601f8311600181146200056457600084156200054b5750858301515b600019600386901b1c1916600185901b178555620004f0565b600085815260208120601f198616915b82811015620005955788860151825594840194600190910190840162000574565b5085821015620005b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200021057634e487b7160e01b600052601160045260246000fd5b60208152600082518060208401526200060781604085016020870162000340565b601f01601f19169190910160400192915050565b80516020808301519190811015620004a05760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611d566200069b60003960006109c90152600061099e015260006111ae01526000611186015260006110e10152600061110b015260006111350152611d566000f3fe6080604052600436106101ee5760003560e01c8063715018a61161010d57806390c3f38f116100a0578063d505accf1161006f578063d505accf14610569578063d62d311f14610589578063dd62ed3e146105a9578063f2fde38b146105c9578063fb7f21eb146105e957600080fd5b806390c3f38f146104f457806395d89b4114610514578063a457c2d714610529578063a9059cbb1461054957600080fd5b80637ecebe00116100dc5780637ecebe001461046f57806384b0196e1461048f578063872ee9bf146104b75780638da5cb5b146104cc57600080fd5b8063715018a6146104055780637284e4161461041a578063772616ba1461042f57806379cc67901461044f57600080fd5b80633644e515116101855780634c78529e116101545780634c78529e1461035d57806354fd4d501461037d5780635c5f346a146103ba57806370a08231146103cf57600080fd5b80633644e515146102e857806339509351146102fd57806340c10f191461031d57806342966c681461033d57600080fd5b8063198581a5116101c1578063198581a51461028257806323b872dd146102975780632a39c1ea146102b7578063313ce567146102cc57600080fd5b806306fdde03146101f3578063095ea7b31461021e5780631386dc2d1461024e57806318160ddd14610263575b600080fd5b3480156101ff57600080fd5b506102086105fe565b6040516102159190611865565b60405180910390f35b34801561022a57600080fd5b5061023e61023936600461189b565b610690565b6040519015158152602001610215565b34801561025a57600080fd5b506102086106aa565b34801561026f57600080fd5b506008545b604051908152602001610215565b610295610290366004611951565b6106b9565b005b3480156102a357600080fd5b5061023e6102b23660046119a2565b610777565b3480156102c357600080fd5b5061020861079b565b3480156102d857600080fd5b5060405160128152602001610215565b3480156102f457600080fd5b506102746107aa565b34801561030957600080fd5b5061023e61031836600461189b565b6107b9565b34801561032957600080fd5b5061029561033836600461189b565b6107db565b34801561034957600080fd5b506102956103583660046119de565b6107ed565b34801561036957600080fd5b50610295610378366004611951565b6107fa565b34801561038957600080fd5b5060408051808201909152601481527353524332302d6275726e61626c652d302e302e3160601b6020820152610208565b3480156103c657600080fd5b5061027461080e565b3480156103db57600080fd5b506102746103ea3660046119f7565b6001600160a01b031660009081526006602052604090205490565b34801561041157600080fd5b50610295610926565b34801561042657600080fd5b5061020861093a565b34801561043b57600080fd5b5061029561044a366004611951565b610949565b34801561045b57600080fd5b5061029561046a36600461189b565b61095d565b34801561047b57600080fd5b5061027461048a3660046119f7565b610972565b34801561049b57600080fd5b506104a4610990565b6040516102159796959493929190611a12565b3480156104c357600080fd5b50610208610a19565b3480156104d857600080fd5b506000546040516001600160a01b039091168152602001610215565b34801561050057600080fd5b5061029561050f366004611951565b610a28565b34801561052057600080fd5b50610208610a3c565b34801561053557600080fd5b5061023e61054436600461189b565b610a4b565b34801561055557600080fd5b5061023e61056436600461189b565b610ac6565b34801561057557600080fd5b50610295610584366004611aa8565b610ad4565b34801561059557600080fd5b506102956105a4366004611951565b610c38565b3480156105b557600080fd5b506102746105c4366004611b1b565b610c4c565b3480156105d557600080fd5b506102956105e43660046119f7565b610c77565b3480156105f557600080fd5b50610208610ced565b60606009805461060d90611b4e565b80601f016020809104026020016040519081016040528092919081815260200182805461063990611b4e565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b5050505050905090565b60003361069e818585610d30565b60019150505b92915050565b60606001805461060d90611b4e565b6106c1610e55565b600081511180156106d657506207d000815111155b61071b5760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206c6f676f2073697a6560781b60448201526064015b60405180910390fd5b61072361080e565b3410156107675760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081c185e48185b5bdd5b9d60721b6044820152606401610712565b60026107738282611bd0565b5050565b600033610785858285610eaf565b610790858585610f29565b506001949350505050565b60606004805461060d90611b4e565b60006107b46110d4565b905090565b60003361069e8185856107cc8383610c4c565b6107d69190611c90565b610d30565b6107e3610e55565b61077382826111ff565b6107f733826112c0565b50565b610802610e55565b60046107738282611bd0565b60405160206024820152600e60448201526d1b1bd9dbd7dc185e585b5bdd5b9d60921b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b0316630db8d74d60e11b179052516108799190611cb1565b600060405180830381855afa9150503d80600081146108b4576040519150601f19603f3d011682016040523d82523d6000602084013e6108b9565b606091505b50915091508161090b5760405162461bcd60e51b815260206004820152601960248201527f676574206c6f676f5f706179616d6f756e74206661696c6564000000000000006044820152606401610712565b8080602001905181019061091f9190611ccd565b9250505090565b61092e610e55565b61093860006113f1565b565b60606003805461060d90611b4e565b610951610e55565b60056107738282611bd0565b610968823383610eaf565b61077382826112c0565b6001600160a01b0381166000908152600d60205260408120546106a4565b6000606080828080836109c47f0000000000000000000000000000000000000000000000000000000000000000600b611441565b6109ef7f0000000000000000000000000000000000000000000000000000000000000000600c611441565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606005805461060d90611b4e565b610a30610e55565b60036107738282611bd0565b6060600a805461060d90611b4e565b60003381610a598286610c4c565b905083811015610ab95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610712565b6107908286868403610d30565b60003361069e818585610f29565b83421115610b245760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610712565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610b538c6114e5565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610bae8261150d565b90506000610bbe8287878761153a565b9050896001600160a01b0316816001600160a01b031614610c215760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610712565b610c2c8a8a8a610d30565b50505050505050505050565b610c40610e55565b60016107738282611bd0565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b610c7f610e55565b6001600160a01b038116610ce45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610712565b6107f7816113f1565b60606002805461060d90611b4e565b6000602083511015610d1857610d1183611562565b90506106a4565b81610d238482611bd0565b5060ff90506106a4565b90565b6001600160a01b038316610d925760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610712565b6001600160a01b038216610df35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610712565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000546001600160a01b031633146109385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610712565b6000610ebb8484610c4c565b90506000198114610f235781811015610f165760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610712565b610f238484848403610d30565b50505050565b6001600160a01b038316610f8d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610712565b6001600160a01b038216610fef5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610712565b6001600160a01b038316600090815260066020526040902054818110156110675760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610712565b6001600160a01b0380851660008181526006602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110c79086815260200190565b60405180910390a3610f23565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561112d57507f000000000000000000000000000000000000000000000000000000000000000046145b1561115757507f000000000000000000000000000000000000000000000000000000000000000090565b6107b4604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6001600160a01b0382166112555760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610712565b80600860008282546112679190611c90565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166113205760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610712565b6001600160a01b038216600090815260066020526040902054818110156113945760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610712565b6001600160a01b03831660008181526006602090815260408083208686039055600880548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610e48565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060ff831461145457610d11836115a0565b81805461146090611b4e565b80601f016020809104026020016040519081016040528092919081815260200182805461148c90611b4e565b80156114d95780601f106114ae576101008083540402835291602001916114d9565b820191906000526020600020905b8154815290600101906020018083116114bc57829003601f168201915b505050505090506106a4565b6001600160a01b0381166000908152600d602052604090208054600181018255905b50919050565b60006106a461151a6110d4565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061154b878787876115df565b91509150611558816116a3565b5095945050505050565b600080829050601f8151111561158d578260405163305a27a960e01b81526004016107129190611865565b805161159882611ce6565b179392505050565b606060006115ad836117ed565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611616575060009050600361169a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561166a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116935760006001925092505061169a565b9150600090505b94509492505050565b60008160048111156116b7576116b7611d0a565b036116bf5750565b60018160048111156116d3576116d3611d0a565b036117205760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610712565b600281600481111561173457611734611d0a565b036117815760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610712565b600381600481111561179557611795611d0a565b036107f75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610712565b600060ff8216601f8111156106a457604051632cd44ac360e21b815260040160405180910390fd5b60005b83811015611830578181015183820152602001611818565b50506000910152565b60008151808452611851816020860160208601611815565b601f01601f19169290920160200192915050565b6020815260006118786020830184611839565b9392505050565b80356001600160a01b038116811461189657600080fd5b919050565b600080604083850312156118ae57600080fd5b6118b78361187f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118f6576118f66118c5565b604051601f8501601f19908116603f0116810190828211818310171561191e5761191e6118c5565b8160405280935085815286868601111561193757600080fd5b858560208301376000602087830101525050509392505050565b60006020828403121561196357600080fd5b813567ffffffffffffffff81111561197a57600080fd5b8201601f8101841361198b57600080fd5b61199a848235602084016118db565b949350505050565b6000806000606084860312156119b757600080fd5b6119c08461187f565b92506119ce6020850161187f565b9150604084013590509250925092565b6000602082840312156119f057600080fd5b5035919050565b600060208284031215611a0957600080fd5b6118788261187f565b60ff60f81b881681526000602060e081840152611a3260e084018a611839565b8381036040850152611a44818a611839565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611a9657835183529284019291840191600101611a7a565b50909c9b505050505050505050505050565b600080600080600080600060e0888a031215611ac357600080fd5b611acc8861187f565b9650611ada6020890161187f565b95506040880135945060608801359350608088013560ff81168114611afe57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611b2e57600080fd5b611b378361187f565b9150611b456020840161187f565b90509250929050565b600181811c90821680611b6257607f821691505b60208210810361150757634e487b7160e01b600052602260045260246000fd5b601f8211156113ec57600081815260208120601f850160051c81016020861015611ba95750805b601f850160051c820191505b81811015611bc857828155600101611bb5565b505050505050565b815167ffffffffffffffff811115611bea57611bea6118c5565b611bfe81611bf88454611b4e565b84611b82565b602080601f831160018114611c335760008415611c1b5750858301515b600019600386901b1c1916600185901b178555611bc8565b600085815260208120601f198616915b82811015611c6257888601518255948401946001909101908401611c43565b5085821015611c805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156106a457634e487b7160e01b600052601160045260246000fd5b60008251611cc3818460208701611815565b9190910192915050565b600060208284031215611cdf57600080fd5b5051919050565b805160208083015191908110156115075760001960209190910360031b1b16919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220deb1fc0115bdd0c3a9d98d9b17bf0a0e4e9322ce4b9ade5304b5fe9c2c487c7464736f6c63430008110033";

    public SRC20Burnable(Web3j web3j, long chainId) {
        contractUtil = new ContractUtil(web3j, chainId, "");
    }

    public SRC20Burnable(Web3j web3j, long chainId, String contractAddr) {
        contractUtil = new ContractUtil(web3j, chainId, contractAddr);
    }

    public List<String> deploy(String privateKey, String name, String symbol, BigInteger totalSupply) throws Exception {
        String data = bytecode + FunctionEncoder.encodeConstructor(Arrays.asList(new Utf8String(name), new Utf8String(symbol), new Uint256(totalSupply)));
        String ret = contractUtil.deploy(privateKey, data);
        return Arrays.asList(ret.split("-"));
    }

    public void load(String contractAddr) {
        contractUtil.contractAddr = contractAddr;
    }

    // for ERC20
    public String burn(String privateKey, BigInteger amount) throws Exception {
        Function function = new Function("burn", Collections.singletonList(new Uint256(amount)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String mint(String privateKey, Address to, BigInteger amount) throws Exception {
        Function function = new Function("mint", Arrays.asList(to, new Uint256(amount)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String transfer(String privateKey, Address to, BigInteger amount) throws Exception {
        Function function = new Function("transfer", Arrays.asList(to, new Uint256(amount)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String name() throws Exception {
        Function function = new Function("name", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String symbol() throws Exception {
        Function function = new Function("symbol", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger decimals() throws Exception {
        Function function = new Function("decimals", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint8>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint8) someTypes.get(0)).getValue();
    }

    public BigInteger totalSupply() throws Exception {
        Function function = new Function("totalSupply", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    public Address owner() throws Exception {
        Function function = new Function("owner", Collections.emptyList(), Collections.singletonList(new TypeReference<Address>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return (Address) someTypes.get(0);
    }

    public BigInteger balanceOf(Address account) throws Exception {
        Function function = new Function("balanceOf", Collections.singletonList(account), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    // for SRC20
    public String setOrgName(String privateKey, String orgName) throws Exception {
        Function function = new Function("setOrgName", Collections.singletonList(new Utf8String(orgName)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setLogo(String privateKey, byte[] logo) throws Exception {
        if (logo.length > 128 * 1024) {
            throw new Exception("oversize logo, max: 128 KB");
        }
        Function function = new Function("setLogo", Collections.singletonList(new DynamicBytes(logo)), Collections.emptyList());
        return contractUtil.call(privateKey, getLogoPayAmount(), function);
    }

    public String setDescription(String privateKey, String description) throws Exception {
        Function function = new Function("setDescription", Collections.singletonList(new Utf8String(description)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setOfficialUrl(String privateKey, String officialUrl) throws Exception {
        Function function = new Function("setOfficialUrl", Collections.singletonList(new Utf8String(officialUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setWhitePaperUrl(String privateKey, String whitePaperUrl) throws Exception {
        Function function = new Function("setWhitePaperUrl", Collections.singletonList(new Utf8String(whitePaperUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String orgName() throws Exception {
        Function function = new Function("orgName", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public byte[] logo() throws Exception {
        Function function = new Function("logo", Collections.emptyList(), Collections.singletonList(new TypeReference<DynamicBytes>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((DynamicBytes) someTypes.get(0)).getValue();
    }

    public String description() throws Exception {
        Function function = new Function("description", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String officialUrl() throws Exception {
        Function function = new Function("officialUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String whitePaperUrl() throws Exception {
        Function function = new Function("whitePaperUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String version() throws Exception {
        Function function = new Function("version", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger getLogoPayAmount() throws Exception {
        Function function = new Function("getLogoPayAmount", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }
}
