package com.anwang.src20;

import com.anwang.utils.ContractUtil;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.protocol.Web3j;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class SRC20Mintable {
    private final ContractUtil contractUtil;
    private final String bytecode = "0x6101606040523480156200001257600080fd5b5060405162002236380380620022368339810160408190526200003591620003f7565b8280604051806040016040528060018152602001603160f81b81525085856200006d620000676200017260201b60201c565b62000176565b60096200007b8382620004f8565b50600a6200008a8282620004f8565b505050620000a8600b83620001c660201b62000c871790919060201c565b61012052620000c581600c620001c6602090811b62000c8717901c565b61014052815160208084019190912060e052815190820120610100524660a0526200015360e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000169338262000216565b50505062000640565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602083511015620001e657620001de83620002df565b905062000210565b82620001fd836200032260201b62000cb81760201c565b906200020a9082620004f8565b5060ff90505b92915050565b6001600160a01b038216620002725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060086000828254620002869190620005c4565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080829050601f815111156200030d578260405163305a27a960e01b8152600401620002699190620005e6565b80516200031a826200061b565b179392505050565b90565b505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200035d57818101518382015260200162000343565b50506000910152565b600082601f8301126200037857600080fd5b81516001600160401b03808211156200039557620003956200032a565b604051601f8301601f19908116603f01168101908282118183101715620003c057620003c06200032a565b81604052838152866020858801011115620003da57600080fd5b620003ed84602083016020890162000340565b9695505050505050565b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b620004338783880162000366565b945060208601519150808211156200044a57600080fd5b50620004598682870162000366565b925050604084015190509250925092565b600181811c908216806200047f57607f821691505b602082108103620004a057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032557600081815260208120601f850160051c81016020861015620004cf5750805b601f850160051c820191505b81811015620004f057828155600101620004db565b505050505050565b81516001600160401b038111156200051457620005146200032a565b6200052c816200052584546200046a565b84620004a6565b602080601f8311600181146200056457600084156200054b5750858301515b600019600386901b1c1916600185901b178555620004f0565b600085815260208120601f198616915b82811015620005955788860151825594840194600190910190840162000574565b5085821015620005b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200021057634e487b7160e01b600052601160045260246000fd5b60208152600082518060208401526200060781604085016020870162000340565b601f01601f19169190910160400192915050565b80516020808301519190811015620004a05760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611b9b6200069b60003960006109510152600061092601526000611138015260006111100152600061106b01526000611095015260006110bf0152611b9b6000f3fe6080604052600436106101d85760003560e01c8063715018a61161010257806395d89b4111610095578063d62d311f11610064578063d62d311f14610533578063dd62ed3e14610553578063f2fde38b14610573578063fb7f21eb1461059357600080fd5b806395d89b41146104be578063a457c2d7146104d3578063a9059cbb146104f3578063d505accf1461051357600080fd5b806384b0196e116100d157806384b0196e14610439578063872ee9bf146104615780638da5cb5b1461047657806390c3f38f1461049e57600080fd5b8063715018a6146103cf5780637284e416146103e4578063772616ba146103f95780637ecebe001461041957600080fd5b8063313ce5671161017a5780634c78529e116101495780634c78529e1461032757806354fd4d50146103475780635c5f346a1461038457806370a082311461039957600080fd5b8063313ce567146102b65780633644e515146102d257806339509351146102e757806340c10f191461030757600080fd5b806318160ddd116101b657806318160ddd1461024d578063198581a51461026c57806323b872dd146102815780632a39c1ea146102a157600080fd5b806306fdde03146101dd578063095ea7b3146102085780631386dc2d14610238575b600080fd5b3480156101e957600080fd5b506101f26105a8565b6040516101ff91906116c3565b60405180910390f35b34801561021457600080fd5b506102286102233660046116f9565b61063a565b60405190151581526020016101ff565b34801561024457600080fd5b506101f2610654565b34801561025957600080fd5b506008545b6040519081526020016101ff565b61027f61027a3660046117af565b610663565b005b34801561028d57600080fd5b5061022861029c366004611800565b610721565b3480156102ad57600080fd5b506101f2610745565b3480156102c257600080fd5b50604051601281526020016101ff565b3480156102de57600080fd5b5061025e610754565b3480156102f357600080fd5b506102286103023660046116f9565b610763565b34801561031357600080fd5b5061027f6103223660046116f9565b610785565b34801561033357600080fd5b5061027f6103423660046117af565b610797565b34801561035357600080fd5b5060408051808201909152601481527353524332302d6d696e7461626c652d302e302e3160601b60208201526101f2565b34801561039057600080fd5b5061025e6107ab565b3480156103a557600080fd5b5061025e6103b436600461183c565b6001600160a01b031660009081526006602052604090205490565b3480156103db57600080fd5b5061027f6108c3565b3480156103f057600080fd5b506101f26108d7565b34801561040557600080fd5b5061027f6104143660046117af565b6108e6565b34801561042557600080fd5b5061025e61043436600461183c565b6108fa565b34801561044557600080fd5b5061044e610918565b6040516101ff9796959493929190611857565b34801561046d57600080fd5b506101f26109a1565b34801561048257600080fd5b506000546040516001600160a01b0390911681526020016101ff565b3480156104aa57600080fd5b5061027f6104b93660046117af565b6109b0565b3480156104ca57600080fd5b506101f26109c4565b3480156104df57600080fd5b506102286104ee3660046116f9565b6109d3565b3480156104ff57600080fd5b5061022861050e3660046116f9565b610a4e565b34801561051f57600080fd5b5061027f61052e3660046118ed565b610a5c565b34801561053f57600080fd5b5061027f61054e3660046117af565b610bc0565b34801561055f57600080fd5b5061025e61056e366004611960565b610bd4565b34801561057f57600080fd5b5061027f61058e36600461183c565b610bff565b34801561059f57600080fd5b506101f2610c78565b6060600980546105b790611993565b80601f01602080910402602001604051908101604052809291908181526020018280546105e390611993565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b5050505050905090565b600033610648818585610cbb565b60019150505b92915050565b6060600180546105b790611993565b61066b610ddf565b6000815111801561068057506207d000815111155b6106c55760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206c6f676f2073697a6560781b60448201526064015b60405180910390fd5b6106cd6107ab565b3410156107115760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081c185e48185b5bdd5b9d60721b60448201526064016106bc565b600261071d8282611a15565b5050565b60003361072f858285610e39565b61073a858585610eb3565b506001949350505050565b6060600480546105b790611993565b600061075e61105e565b905090565b6000336106488185856107768383610bd4565b6107809190611ad5565b610cbb565b61078d610ddf565b61071d8282611189565b61079f610ddf565b600461071d8282611a15565b60405160206024820152600e60448201526d1b1bd9dbd7dc185e585b5bdd5b9d60921b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b0316630db8d74d60e11b179052516108169190611af6565b600060405180830381855afa9150503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b5091509150816108a85760405162461bcd60e51b815260206004820152601960248201527f676574206c6f676f5f706179616d6f756e74206661696c65640000000000000060448201526064016106bc565b808060200190518101906108bc9190611b12565b9250505090565b6108cb610ddf565b6108d5600061124a565b565b6060600380546105b790611993565b6108ee610ddf565b600561071d8282611a15565b6001600160a01b0381166000908152600d602052604081205461064e565b60006060808280808361094c7f0000000000000000000000000000000000000000000000000000000000000000600b61129a565b6109777f0000000000000000000000000000000000000000000000000000000000000000600c61129a565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600580546105b790611993565b6109b8610ddf565b600361071d8282611a15565b6060600a80546105b790611993565b600033816109e18286610bd4565b905083811015610a415760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106bc565b61073a8286868403610cbb565b600033610648818585610eb3565b83421115610aac5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016106bc565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610adb8c61133e565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610b3682611366565b90506000610b4682878787611393565b9050896001600160a01b0316816001600160a01b031614610ba95760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016106bc565b610bb48a8a8a610cbb565b50505050505050505050565b610bc8610ddf565b600161071d8282611a15565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b610c07610ddf565b6001600160a01b038116610c6c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bc565b610c758161124a565b50565b6060600280546105b790611993565b6000602083511015610ca357610c9c836113bb565b905061064e565b81610cae8482611a15565b5060ff905061064e565b90565b6001600160a01b038316610d1d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106bc565b6001600160a01b038216610d7e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106bc565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000546001600160a01b031633146108d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106bc565b6000610e458484610bd4565b90506000198114610ead5781811015610ea05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106bc565b610ead8484848403610cbb565b50505050565b6001600160a01b038316610f175760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106bc565b6001600160a01b038216610f795760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106bc565b6001600160a01b03831660009081526006602052604090205481811015610ff15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106bc565b6001600160a01b0380851660008181526006602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110519086815260200190565b60405180910390a3610ead565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156110b757507f000000000000000000000000000000000000000000000000000000000000000046145b156110e157507f000000000000000000000000000000000000000000000000000000000000000090565b61075e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6001600160a01b0382166111df5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106bc565b80600860008282546111f19190611ad5565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060ff83146112ad57610c9c836113fe565b8180546112b990611993565b80601f01602080910402602001604051908101604052809291908181526020018280546112e590611993565b80156113325780601f1061130757610100808354040283529160200191611332565b820191906000526020600020905b81548152906001019060200180831161131557829003601f168201915b5050505050905061064e565b6001600160a01b0381166000908152600d602052604090208054600181018255905b50919050565b600061064e61137361105e565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060006113a48787878761143d565b915091506113b181611501565b5095945050505050565b600080829050601f815111156113e6578260405163305a27a960e01b81526004016106bc91906116c3565b80516113f182611b2b565b179392505050565b505050565b6060600061140b8361164b565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561147457506000905060036114f8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114c8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166114f1576000600192509250506114f8565b9150600090505b94509492505050565b600081600481111561151557611515611b4f565b0361151d5750565b600181600481111561153157611531611b4f565b0361157e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106bc565b600281600481111561159257611592611b4f565b036115df5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106bc565b60038160048111156115f3576115f3611b4f565b03610c755760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106bc565b600060ff8216601f81111561064e57604051632cd44ac360e21b815260040160405180910390fd5b60005b8381101561168e578181015183820152602001611676565b50506000910152565b600081518084526116af816020860160208601611673565b601f01601f19169290920160200192915050565b6020815260006116d66020830184611697565b9392505050565b80356001600160a01b03811681146116f457600080fd5b919050565b6000806040838503121561170c57600080fd5b611715836116dd565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561175457611754611723565b604051601f8501601f19908116603f0116810190828211818310171561177c5761177c611723565b8160405280935085815286868601111561179557600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156117c157600080fd5b813567ffffffffffffffff8111156117d857600080fd5b8201601f810184136117e957600080fd5b6117f884823560208401611739565b949350505050565b60008060006060848603121561181557600080fd5b61181e846116dd565b925061182c602085016116dd565b9150604084013590509250925092565b60006020828403121561184e57600080fd5b6116d6826116dd565b60ff60f81b881681526000602060e08184015261187760e084018a611697565b8381036040850152611889818a611697565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156118db578351835292840192918401916001016118bf565b50909c9b505050505050505050505050565b600080600080600080600060e0888a03121561190857600080fd5b611911886116dd565b965061191f602089016116dd565b95506040880135945060608801359350608088013560ff8116811461194357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561197357600080fd5b61197c836116dd565b915061198a602084016116dd565b90509250929050565b600181811c908216806119a757607f821691505b60208210810361136057634e487b7160e01b600052602260045260246000fd5b601f8211156113f957600081815260208120601f850160051c810160208610156119ee5750805b601f850160051c820191505b81811015611a0d578281556001016119fa565b505050505050565b815167ffffffffffffffff811115611a2f57611a2f611723565b611a4381611a3d8454611993565b846119c7565b602080601f831160018114611a785760008415611a605750858301515b600019600386901b1c1916600185901b178555611a0d565b600085815260208120601f198616915b82811015611aa757888601518255948401946001909101908401611a88565b5085821015611ac55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561064e57634e487b7160e01b600052601160045260246000fd5b60008251611b08818460208701611673565b9190910192915050565b600060208284031215611b2457600080fd5b5051919050565b805160208083015191908110156113605760001960209190910360031b1b16919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220dc06b2b62924145e2cc2b6c15536050499acac070b59be795c5928d7bf28cfcb64736f6c63430008110033";

    public SRC20Mintable(Web3j web3j, long chainId) {
        contractUtil = new ContractUtil(web3j, chainId, "");
    }

    public SRC20Mintable(Web3j web3j, long chainId, String contractAddr) {
        contractUtil = new ContractUtil(web3j, chainId, contractAddr);
    }

    public List<String> deploy(String privateKey, String name, String symbol, BigInteger totalSupply) throws Exception {
        String data = bytecode + FunctionEncoder.encodeConstructor(Arrays.asList(new Utf8String(name), new Utf8String(symbol), new Uint256(totalSupply)));
        String ret = contractUtil.deploy(privateKey, data);
        return Arrays.asList(ret.split("-"));
    }

    public void load(String contractAddr) {
        contractUtil.contractAddr = contractAddr;
    }

    // for ERC20
    public String mint(String privateKey, Address to, BigInteger amount) throws Exception {
        Function function = new Function("mint", Arrays.asList(to, new Uint256(amount)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String transfer(String privateKey, Address to, BigInteger amount) throws Exception {
        Function function = new Function("transfer", Arrays.asList(to, new Uint256(amount)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String name() throws Exception {
        Function function = new Function("name", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String symbol() throws Exception {
        Function function = new Function("symbol", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger decimals() throws Exception {
        Function function = new Function("decimals", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint8>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint8) someTypes.get(0)).getValue();
    }

    public BigInteger totalSupply() throws Exception {
        Function function = new Function("totalSupply", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    public Address owner() throws Exception {
        Function function = new Function("owner", Collections.emptyList(), Collections.singletonList(new TypeReference<Address>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return (Address) someTypes.get(0);
    }

    public BigInteger balanceOf(Address account) throws Exception {
        Function function = new Function("balanceOf", Collections.singletonList(account), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    // for SRC20
    public String setOrgName(String privateKey, String orgName) throws Exception {
        Function function = new Function("setOrgName", Collections.singletonList(new Utf8String(orgName)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setLogo(String privateKey, byte[] logo) throws Exception {
        if (logo.length > 128 * 1024) {
            throw new Exception("oversize logo, max: 128 KB");
        }
        Function function = new Function("setLogo", Collections.singletonList(new DynamicBytes(logo)), Collections.emptyList());
        return contractUtil.call(privateKey, getLogoPayAmount(), function);
    }

    public String setDescription(String privateKey, String description) throws Exception {
        Function function = new Function("setDescription", Collections.singletonList(new Utf8String(description)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setOfficialUrl(String privateKey, String officialUrl) throws Exception {
        Function function = new Function("setOfficialUrl", Collections.singletonList(new Utf8String(officialUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setWhitePaperUrl(String privateKey, String whitePaperUrl) throws Exception {
        Function function = new Function("setWhitePaperUrl", Collections.singletonList(new Utf8String(whitePaperUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String orgName() throws Exception {
        Function function = new Function("orgName", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public byte[] logo() throws Exception {
        Function function = new Function("logo", Collections.emptyList(), Collections.singletonList(new TypeReference<DynamicBytes>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((DynamicBytes) someTypes.get(0)).getValue();
    }

    public String description() throws Exception {
        Function function = new Function("description", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String officialUrl() throws Exception {
        Function function = new Function("officialUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String whitePaperUrl() throws Exception {
        Function function = new Function("whitePaperUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String version() throws Exception {
        Function function = new Function("version", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger getLogoPayAmount() throws Exception {
        Function function = new Function("getLogoPayAmount", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }
}
