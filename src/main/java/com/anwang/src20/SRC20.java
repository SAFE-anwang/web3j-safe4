package com.anwang.src20;

import com.anwang.utils.ContractUtil;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.protocol.Web3j;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class SRC20 {
    private final ContractUtil contractUtil;
    private final String bytecode = "0x6101606040523480156200001257600080fd5b506040516200212f3803806200212f8339810160408190526200003591620003f7565b8280604051806040016040528060018152602001603160f81b81525085856200006d620000676200017260201b60201c565b62000176565b60096200007b8382620004f8565b50600a6200008a8282620004f8565b505050620000a8600b83620001c660201b62000c411790919060201c565b61012052620000c581600c620001c6602090811b62000c4117901c565b61014052815160208084019190912060e052815190820120610100524660a0526200015360e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525062000169338262000216565b50505062000640565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602083511015620001e657620001de83620002df565b905062000210565b82620001fd836200032260201b62000c721760201c565b906200020a9082620004f8565b5060ff90505b92915050565b6001600160a01b038216620002725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b8060086000828254620002869190620005c4565b90915550506001600160a01b0382166000818152600660209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600080829050601f815111156200030d578260405163305a27a960e01b8152600401620002699190620005e6565b80516200031a826200061b565b179392505050565b90565b505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200035d57818101518382015260200162000343565b50506000910152565b600082601f8301126200037857600080fd5b81516001600160401b03808211156200039557620003956200032a565b604051601f8301601f19908116603f01168101908282118183101715620003c057620003c06200032a565b81604052838152866020858801011115620003da57600080fd5b620003ed84602083016020890162000340565b9695505050505050565b6000806000606084860312156200040d57600080fd5b83516001600160401b03808211156200042557600080fd5b620004338783880162000366565b945060208601519150808211156200044a57600080fd5b50620004598682870162000366565b925050604084015190509250925092565b600181811c908216806200047f57607f821691505b602082108103620004a057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032557600081815260208120601f850160051c81016020861015620004cf5750805b601f850160051c820191505b81811015620004f057828155600101620004db565b505050505050565b81516001600160401b038111156200051457620005146200032a565b6200052c816200052584546200046a565b84620004a6565b602080601f8311600181146200056457600084156200054b5750858301515b600019600386901b1c1916600185901b178555620004f0565b600085815260208120601f198616915b82811015620005955788860151825594840194600190910190840162000574565b5085821015620005b45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200021057634e487b7160e01b600052601160045260246000fd5b60208152600082518060208401526200060781604085016020870162000340565b601f01601f19169190910160400192915050565b80516020808301519190811015620004a05760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611a946200069b600039600061090b015260006108e0015260006110f2015260006110ca015260006110250152600061104f015260006110790152611a946000f3fe6080604052600436106101cd5760003560e01c80637284e416116100f757806395d89b4111610095578063d62d311f11610064578063d62d311f146104ff578063dd62ed3e1461051f578063f2fde38b1461053f578063fb7f21eb1461055f57600080fd5b806395d89b411461048a578063a457c2d71461049f578063a9059cbb146104bf578063d505accf146104df57600080fd5b806384b0196e116100d157806384b0196e14610405578063872ee9bf1461042d5780638da5cb5b1461044257806390c3f38f1461046a57600080fd5b80637284e416146103b0578063772616ba146103c55780637ecebe00146103e557600080fd5b8063313ce5671161016f57806354fd4d501161013e57806354fd4d501461031c5780635c5f346a1461035057806370a0823114610365578063715018a61461039b57600080fd5b8063313ce567146102ab5780633644e515146102c757806339509351146102dc5780634c78529e146102fc57600080fd5b806318160ddd116101ab57806318160ddd14610242578063198581a51461026157806323b872dd146102765780632a39c1ea1461029657600080fd5b806306fdde03146101d2578063095ea7b3146101fd5780631386dc2d1461022d575b600080fd5b3480156101de57600080fd5b506101e7610574565b6040516101f491906115bc565b60405180910390f35b34801561020957600080fd5b5061021d6102183660046115f2565b610606565b60405190151581526020016101f4565b34801561023957600080fd5b506101e7610620565b34801561024e57600080fd5b506008545b6040519081526020016101f4565b61027461026f3660046116a8565b61062f565b005b34801561028257600080fd5b5061021d6102913660046116f9565b6106ed565b3480156102a257600080fd5b506101e7610711565b3480156102b757600080fd5b50604051601281526020016101f4565b3480156102d357600080fd5b50610253610720565b3480156102e857600080fd5b5061021d6102f73660046115f2565b61072f565b34801561030857600080fd5b506102746103173660046116a8565b610751565b34801561032857600080fd5b5060408051808201909152600b81526a53524332302d302e302e3160a81b60208201526101e7565b34801561035c57600080fd5b50610253610765565b34801561037157600080fd5b50610253610380366004611735565b6001600160a01b031660009081526006602052604090205490565b3480156103a757600080fd5b5061027461087d565b3480156103bc57600080fd5b506101e7610891565b3480156103d157600080fd5b506102746103e03660046116a8565b6108a0565b3480156103f157600080fd5b50610253610400366004611735565b6108b4565b34801561041157600080fd5b5061041a6108d2565b6040516101f49796959493929190611750565b34801561043957600080fd5b506101e761095b565b34801561044e57600080fd5b506000546040516001600160a01b0390911681526020016101f4565b34801561047657600080fd5b506102746104853660046116a8565b61096a565b34801561049657600080fd5b506101e761097e565b3480156104ab57600080fd5b5061021d6104ba3660046115f2565b61098d565b3480156104cb57600080fd5b5061021d6104da3660046115f2565b610a08565b3480156104eb57600080fd5b506102746104fa3660046117e6565b610a16565b34801561050b57600080fd5b5061027461051a3660046116a8565b610b7a565b34801561052b57600080fd5b5061025361053a366004611859565b610b8e565b34801561054b57600080fd5b5061027461055a366004611735565b610bb9565b34801561056b57600080fd5b506101e7610c32565b6060600980546105839061188c565b80601f01602080910402602001604051908101604052809291908181526020018280546105af9061188c565b80156105fc5780601f106105d1576101008083540402835291602001916105fc565b820191906000526020600020905b8154815290600101906020018083116105df57829003601f168201915b5050505050905090565b600033610614818585610c75565b60019150505b92915050565b6060600180546105839061188c565b610637610d99565b6000815111801561064c57506207d000815111155b6106915760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964206c6f676f2073697a6560781b60448201526064015b60405180910390fd5b610699610765565b3410156106dd5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a59081c185e48185b5bdd5b9d60721b6044820152606401610688565b60026106e9828261190e565b5050565b6000336106fb858285610df3565b610706858585610e6d565b506001949350505050565b6060600480546105839061188c565b600061072a611018565b905090565b6000336106148185856107428383610b8e565b61074c91906119ce565b610c75565b610759610d99565b60046106e9828261190e565b60405160206024820152600e60448201526d1b1bd9dbd7dc185e585b5bdd5b9d60921b6064820152600090819081906110009060840160408051601f198184030181529181526020820180516001600160e01b0316630db8d74d60e11b179052516107d091906119ef565b600060405180830381855afa9150503d806000811461080b576040519150601f19603f3d011682016040523d82523d6000602084013e610810565b606091505b5091509150816108625760405162461bcd60e51b815260206004820152601960248201527f676574206c6f676f5f706179616d6f756e74206661696c6564000000000000006044820152606401610688565b808060200190518101906108769190611a0b565b9250505090565b610885610d99565b61088f6000611143565b565b6060600380546105839061188c565b6108a8610d99565b60056106e9828261190e565b6001600160a01b0381166000908152600d602052604081205461061a565b6000606080828080836109067f0000000000000000000000000000000000000000000000000000000000000000600b611193565b6109317f0000000000000000000000000000000000000000000000000000000000000000600c611193565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6060600580546105839061188c565b610972610d99565b60036106e9828261190e565b6060600a80546105839061188c565b6000338161099b8286610b8e565b9050838110156109fb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610688565b6107068286868403610c75565b600033610614818585610e6d565b83421115610a665760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610688565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610a958c611237565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610af08261125f565b90506000610b008287878761128c565b9050896001600160a01b0316816001600160a01b031614610b635760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610688565b610b6e8a8a8a610c75565b50505050505050505050565b610b82610d99565b60016106e9828261190e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b610bc1610d99565b6001600160a01b038116610c265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610688565b610c2f81611143565b50565b6060600280546105839061188c565b6000602083511015610c5d57610c56836112b4565b905061061a565b81610c68848261190e565b5060ff905061061a565b90565b6001600160a01b038316610cd75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610688565b6001600160a01b038216610d385760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610688565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000546001600160a01b0316331461088f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610688565b6000610dff8484610b8e565b90506000198114610e675781811015610e5a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610688565b610e678484848403610c75565b50505050565b6001600160a01b038316610ed15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610688565b6001600160a01b038216610f335760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610688565b6001600160a01b03831660009081526006602052604090205481811015610fab5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610688565b6001600160a01b0380851660008181526006602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061100b9086815260200190565b60405180910390a3610e67565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561107157507f000000000000000000000000000000000000000000000000000000000000000046145b1561109b57507f000000000000000000000000000000000000000000000000000000000000000090565b61072a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060ff83146111a657610c56836112f7565b8180546111b29061188c565b80601f01602080910402602001604051908101604052809291908181526020018280546111de9061188c565b801561122b5780601f106112005761010080835404028352916020019161122b565b820191906000526020600020905b81548152906001019060200180831161120e57829003601f168201915b5050505050905061061a565b6001600160a01b0381166000908152600d602052604090208054600181018255905b50919050565b600061061a61126c611018565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600061129d87878787611336565b915091506112aa816113fa565b5095945050505050565b600080829050601f815111156112df578260405163305a27a960e01b815260040161068891906115bc565b80516112ea82611a24565b179392505050565b505050565b6060600061130483611544565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561136d57506000905060036113f1565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113c1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113ea576000600192509250506113f1565b9150600090505b94509492505050565b600081600481111561140e5761140e611a48565b036114165750565b600181600481111561142a5761142a611a48565b036114775760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610688565b600281600481111561148b5761148b611a48565b036114d85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610688565b60038160048111156114ec576114ec611a48565b03610c2f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610688565b600060ff8216601f81111561061a57604051632cd44ac360e21b815260040160405180910390fd5b60005b8381101561158757818101518382015260200161156f565b50506000910152565b600081518084526115a881602086016020860161156c565b601f01601f19169290920160200192915050565b6020815260006115cf6020830184611590565b9392505050565b80356001600160a01b03811681146115ed57600080fd5b919050565b6000806040838503121561160557600080fd5b61160e836115d6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561164d5761164d61161c565b604051601f8501601f19908116603f011681019082821181831017156116755761167561161c565b8160405280935085815286868601111561168e57600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156116ba57600080fd5b813567ffffffffffffffff8111156116d157600080fd5b8201601f810184136116e257600080fd5b6116f184823560208401611632565b949350505050565b60008060006060848603121561170e57600080fd5b611717846115d6565b9250611725602085016115d6565b9150604084013590509250925092565b60006020828403121561174757600080fd5b6115cf826115d6565b60ff60f81b881681526000602060e08184015261177060e084018a611590565b8381036040850152611782818a611590565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156117d4578351835292840192918401916001016117b8565b50909c9b505050505050505050505050565b600080600080600080600060e0888a03121561180157600080fd5b61180a886115d6565b9650611818602089016115d6565b95506040880135945060608801359350608088013560ff8116811461183c57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561186c57600080fd5b611875836115d6565b9150611883602084016115d6565b90509250929050565b600181811c908216806118a057607f821691505b60208210810361125957634e487b7160e01b600052602260045260246000fd5b601f8211156112f257600081815260208120601f850160051c810160208610156118e75750805b601f850160051c820191505b81811015611906578281556001016118f3565b505050505050565b815167ffffffffffffffff8111156119285761192861161c565b61193c81611936845461188c565b846118c0565b602080601f83116001811461197157600084156119595750858301515b600019600386901b1c1916600185901b178555611906565b600085815260208120601f198616915b828110156119a057888601518255948401946001909101908401611981565b50858210156119be5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561061a57634e487b7160e01b600052601160045260246000fd5b60008251611a0181846020870161156c565b9190910192915050565b600060208284031215611a1d57600080fd5b5051919050565b805160208083015191908110156112595760001960209190910360031b1b16919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f45f6ae306f4f57130e296e18cb891653554aa43d400d898752b20503056cb2e64736f6c63430008110033";

    public SRC20(Web3j web3j, long chainId) {
        contractUtil = new ContractUtil(web3j, chainId, "");
    }

    public SRC20(Web3j web3j, long chainId, String contractAddr) {
        contractUtil = new ContractUtil(web3j, chainId, contractAddr);
    }

    public List<String> deploy(String privateKey, String name, String symbol, BigInteger totalSupply) throws Exception {
        String data = bytecode + FunctionEncoder.encodeConstructor(Arrays.asList(new Utf8String(name), new Utf8String(symbol), new Uint256(totalSupply)));
        String ret = contractUtil.deploy(privateKey, data);
        return Arrays.asList(ret.split("-"));
    }

    // for ERC20
    public String transfer(String privateKey, Address to, BigInteger amount) throws Exception {
        Function function = new Function("transfer", Arrays.asList(to, new Uint256(amount)), Collections.singletonList(new TypeReference<Bool>() {
        }));
        return contractUtil.call(privateKey, function);
    }

    public String approve(String privateKey, Address spender, BigInteger amount) throws Exception {
        Function function = new Function("allowance", Arrays.asList(spender, new Uint256(amount)), Collections.singletonList(new TypeReference<Bool>() {
        }));
        return contractUtil.call(privateKey, function);
    }

    public String transferFrom(String privateKey, Address from, Address to, BigInteger amount) throws Exception {
        Function function = new Function("transferFrom", Arrays.asList(from, to, new Uint256(amount)), Collections.singletonList(new TypeReference<Bool>() {
        }));
        return contractUtil.call(privateKey, function);
    }

    public String name() throws Exception {
        Function function = new Function("name", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String symbol() throws Exception {
        Function function = new Function("symbol", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger decimals() throws Exception {
        Function function = new Function("decimals", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint8>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint8) someTypes.get(0)).getValue();
    }

    public BigInteger totalSupply() throws Exception {
        Function function = new Function("totalSupply", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    public Address owner() throws Exception {
        Function function = new Function("owner", Collections.emptyList(), Collections.singletonList(new TypeReference<Address>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return (Address) someTypes.get(0);
    }

    public BigInteger balanceOf(Address account) throws Exception {
        Function function = new Function("balanceOf", Collections.singletonList(account), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    public BigInteger allowance(Address owner, Address spender) throws Exception {
        Function function = new Function("allowance", Arrays.asList(owner, spender), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }

    // for SRC20
    public String setOrgName(String privateKey, String orgName) throws Exception {
        Function function = new Function("setOrgName", Collections.singletonList(new Utf8String(orgName)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setLogo(String privateKey, byte[] logo) throws Exception {
        if (logo.length > 128 * 1024) {
            throw new Exception("oversize logo, max: 128 KB");
        }
        Function function = new Function("setLogo", Collections.singletonList(new DynamicBytes(logo)), Collections.emptyList());
        return contractUtil.call(privateKey, getLogoPayAmount(), function);
    }

    public String setDescription(String privateKey, String description) throws Exception {
        Function function = new Function("setDescription", Collections.singletonList(new Utf8String(description)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setOfficialUrl(String privateKey, String officialUrl) throws Exception {
        Function function = new Function("setOfficialUrl", Collections.singletonList(new Utf8String(officialUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String setWhitePaperUrl(String privateKey, String whitePaperUrl) throws Exception {
        Function function = new Function("setWhitePaperUrl", Collections.singletonList(new Utf8String(whitePaperUrl)), Collections.emptyList());
        return contractUtil.call(privateKey, function);
    }

    public String orgName() throws Exception {
        Function function = new Function("orgName", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public byte[] logo() throws Exception {
        Function function = new Function("logo", Collections.emptyList(), Collections.singletonList(new TypeReference<DynamicBytes>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((DynamicBytes) someTypes.get(0)).getValue();
    }

    public String description() throws Exception {
        Function function = new Function("description", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String officialUrl() throws Exception {
        Function function = new Function("officialUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String whitePaperUrl() throws Exception {
        Function function = new Function("whitePaperUrl", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public String version() throws Exception {
        Function function = new Function("version", Collections.emptyList(), Collections.singletonList(new TypeReference<Utf8String>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Utf8String) someTypes.get(0)).getValue();
    }

    public BigInteger getLogoPayAmount() throws Exception {
        Function function = new Function("getLogoPayAmount", Collections.emptyList(), Collections.singletonList(new TypeReference<Uint256>() {
        }));
        List<Type> someTypes = contractUtil.query(function);
        return ((Uint256) someTypes.get(0)).getValue();
    }
}
